Implements:
    (N,N)-AtomicRegister instance nnar.

Uses:
    StubbornBestEffortBroadcast, instance sbeb;
    StubbornLinks, instance sl;

// Init & Recovery:

upon event < nnar, Init > do
    (ts, wr, val) := (0, 0, _);
    readlist := [ _ ] `of length` N;
    acklist := [ _ ] `of length` N;
    reading := FALSE;
    writing := FALSE;
    writeval := _;
    readval := _;
    write_phase := FALSE;
    store(wr, ts, val);

upon event < nnar, Recovery > do
    retrieve(wr, ts, val);
    readlist := [ _ ] `of length` N;
    acklist := [ _ ]  `of length` N;
    reading := FALSE;
    readval := _;
    write_phase := FALSE;
    writing := FALSE;
    writeval := _;

// Client Commands:

upon event < nnar, Read > do
    op_id := generate_unique_id();
    readlist := [ _ ] `of length` N;
    acklist := [ _ ] `of length` N;
    reading := TRUE;
    trigger < sbeb, Broadcast | [READ_PROC, op_id] >;

upon event < nnar, Write | v > do
    op_id := generate_unique_id();
    writeval := v;
    acklist := [ _ ] `of length` N;
    readlist := [ _ ] `of length` N;
    writing := TRUE;
    trigger < sbeb, Broadcast | [READ_PROC, op_id] >;

// System Commands:

upon event < sbeb, Deliver | p [READ_PROC, id] > do
    trigger < sl, Send | p, [VALUE, id, ts, wr, val] >;

upon event <sl, Deliver | q, [VALUE, id, ts', wr', v'] > such that id == op_id and !write_phase do
    readlist[q] := (ts', wr', v');
    if #(readlist) > N / 2 and (reading or writing) then
        readlist[self] := (ts, wr, val);
        (maxts, rr, readval) := highest(readlist);
        readlist := [ _ ] `of length` N;
        acklist := [ _ ] `of length` N;
        write_phase := TRUE;
        if reading = TRUE then
            trigger < sbeb, Broadcast | [WRITE_PROC, op_id, maxts, rr, readval] >;
        else
            (ts, wr, val) := (maxts + 1, rank(self), writeval);
            store(ts, wr, val);
            trigger < sbeb, Broadcast | [WRITE_PROC, op_id, maxts + 1, rank(self), writeval] >;

upon event < sbeb, Deliver | p, [WRITE_PROC, id, ts', wr', v'] > do
    if (ts', wr') > (ts, wr) then
        (ts, wr, val) := (ts', wr', v');
        store(ts, wr, val);
    trigger < sl, Send | p, [ACK, id] >;

upon event < sl, Deliver | q, [ACK, id] > such that id == op_id and write_phase do
    acklist[q] := Ack;
    if #(acklist) > N / 2 and (reading or writing) then
        acklist := [ _ ] `of length` N;
        write_phase := FALSE;
        if reading = TRUE then
            reading := FALSE;
            trigger < nnar, ReadReturn | readval >;
        else
            writing := FALSE;
            trigger < nnar, WriteReturn >;

Additional description and assumptions:

1. Every instance can initiate both read and write operations (thus the (N, N) in the name of the algorithm). 
It is assumed that the system is able to progress on operations as long as at least a majority of the instances are working correctly.

2. The rank(*) returns a rank of an instance, which is a static number assigned to an instance. 
The highest(*) returns the largest value ordered lexicographically by (timestamp, rank).

3. Solution will not be receiving special Recovery or Init events. 
Each time it starts, it shall try to recover from the persistent storage 
(during the initial run, the persistent storage will be empty).

4. To improve the performance of Atomic Disk Device, 
one can run multiple instances of the atomic register logic, 
each progressing on a different sector. 
Solutions are expected to provide this kind of concurrency and be able to process many sectors at once. 

5. Every sector is logically a separate atomic register. 
However, you should not keep Configuration.public.n_sectors AtomicRegister objects in memory; 
instead, you should dynamically create and delete them to limit the memory usage.
